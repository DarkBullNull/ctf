The goal is not only just to extract the password, but to patch the files so that they always say "Password OK :)"

the first 0x00 to 0x02 can be patched successfully with out even knowing th password since 1 jump leads to the correct location.

----------------------------------------

* crackme0x00

    The correct password is: 250382

    this can be found by running strings on the executable or by loading it into a disassembler and looking at main

    inside of the main function at address 0x08048470 is the "jz short loc_8048480" after the "test eax, eax"
    this will jump to the part which prints out the password ok message if the user input is correct.
    modifying this to an unconditional jump instruction "jmp short loc_8048480" will change the executable to always print password ok.

----------------------------------------

* crackme0x01

    The correct password is: 5274

    this can be found by loading it into a disassembler and looking at main
    at line 0x0804842b the input from scanf is compared to 0x149a which is 5274 in decimal
    the password must be entered in decimal format or it will not work.

    inside of main at address 0x08048432 there is the "je 0x8048442" after the "cmp dword [local_4h], 0x149a"
    the input from scanf is compared against this value before the jump, if they are equal then it succeeds
    this is the part which jumps to the printing password ok message if the input was correct.
    changing this to an unconditional jump instruction "jmp 0x8048442" will change the executable to always print password ok.

----------------------------------------

* crackme0x02

    The correct password is: 338724

    this can be found by loading it into a disassembler and looking at main
    after the call to scanf values are put into local variables then moved to eax and edx

    0x0804842b  mov dword [local_8h], 0x5a
    0x08048432  mov dword [local_ch], 0x1ec
    0x08048439  mov edx, dword [local_ch]
    0x0804843c  lea eax, [local_8h]

    next the values are added together, 0x5a + 0x1ec = 582

    0x0804843f  add dword [eax], edx

    the result is put into eax and multiplied with itself squaring the value, 582 * 582 = 338724

    0x08048441      8b45f8         mov eax, dword [local_8h]
    0x08048444      0faf45f8       imul eax, dword [local_8h]

    this is the value compared against the user input before the jump not equal, the branch must be false to get the password ok message

    0x0804844e  cmp eax, dword [local_ch]
    0x08048451  jne 0x8048461

    the correct password message is at location 0x8048453 so then changing the jump to go there will be successful

    can do this 2 ways:
    1. changing the "jne 0x8048461" to "nop" will make the program always print the password ok message before it exits
    2. changing the "jne 0x8048461" to "jmp 0x08048453" will make the program goto the password ok message before it exits

----------------------------------------

* crackme0x03

----------------------------------------

* crackme0x04

----------------------------------------

* crackme0x05

----------------------------------------

* crackme0x06

----------------------------------------

* crackme0x07

----------------------------------------

* crackme0x08

----------------------------------------

* crackme0x09

----------------------------------------
